const API_KEY = '{{secrets.OPENWEATHER_API_KEY}}';
const cityInput = document.getElementById('cityInput');
const searchButton = document.getElementById('searchButton');
const unitToggle = document.getElementById('unitToggle');

let cachedWeatherData = null;
let cachedForecastData = null;
let isCelsius = true;

let tempChartInstance = null;
let pressureChartInstance = null;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º—ñ—Å—Ç–∞ –≤ localStorage
function saveCity(city) {
    localStorage.setItem('lastCity', city);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º—ñ—Å—Ç–∞ –∑ localStorage
function getSavedCity() {
    return localStorage.getItem('lastCity');
}

// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ—à—É–∫—É
searchButton.addEventListener('click', () => {
    const city = cityInput.value;
    if (city) {
        getWeatherData(city);
        saveCity(city);
    }
});

// –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è Enter –≤ –ø–æ–ª—ñ –≤–≤–æ–¥—É
cityInput.addEventListener('keypress', (event) => {
    if (event.key === 'Enter') {
        searchButton.click();
    }
});

// –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –æ–¥–∏–Ω–∏—Ü—å –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
unitToggle.addEventListener('click', () => {
    isCelsius = !isCelsius;
    unitToggle.textContent = isCelsius ? '–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ –Ω–∞ ¬∞F' : '–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ –Ω–∞ ¬∞C';
    renderData();
});

// –§—É–Ω–∫—Ü—ñ—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
function toFahrenheit(tempCelsius) {
    return (tempCelsius * 9/5) + 32;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ API —Ç–∞ —ó—Ö –∫–µ—à—É–≤–∞–Ω–Ω—è
function getWeatherData(city) {
    const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric&lang=ua`;
    const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric&lang=ua`;

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ
    fetch(weatherUrl)
        .then(response => response.json())
        .then(data => {
            if (data.cod === 200) {
                cachedWeatherData = data;
                getAstroData(data.coord.lat, data.coord.lon);
                renderData();
            } else {
                document.getElementById('weather-info').innerHTML = `<p>–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</p>`;
            }
        })
        .catch(error => console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö:', error));

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤
    fetch(forecastUrl)
        .then(response => response.json())
        .then(data => {
            if (data.cod === "200") {
                cachedForecastData = data;
                renderData();
            }
        })
        .catch(error => console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑—É:', error));
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–µ—à—É —Ç–∞ –æ–±—Ä–∞–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å
function renderData() {
    if (cachedWeatherData) {
        displayWeather(cachedWeatherData);
        calculateSuccessIndex(cachedWeatherData);
    }
    if (cachedForecastData) {
        displayForecast(cachedForecastData);
    }
}

function displayWeather(data) {
    let temperature = data.main.temp;
    let tempUnit = '¬∞C';
    if (!isCelsius) {
        temperature = toFahrenheit(temperature);
        tempUnit = '¬∞F';
    }

    const description = data.weather[0].description;
    const windSpeed = data.wind.speed;
    const windDeg = data.wind.deg;

    document.getElementById('weather-info').innerHTML = `
        <h3>–ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –≤ ${data.name}</h3>
        <p>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temperature.toFixed(1)}${tempUnit}</p>
        <p>–û–ø–∏—Å: ${description}</p>
    `;

    document.getElementById('wind-info').innerHTML = `
        <p>
            –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: ${windSpeed} –º/—Å
            <span id="windDirectionIcon" style="display: inline-block; transform: rotate(${windDeg}deg);">‚Üë</span>
        </p>
    `;
}

function displayForecast(data) {
    const currentPressure = data.list[0].main.pressure;
    const nextPressure = data.list[1].main.pressure;
    let pressureAdvice = "";
    if (currentPressure > nextPressure) {
        pressureAdvice = "–¢–∏—Å–∫ –∑—Ä–æ—Å—Ç–∞—î: —Ä–∏–±–∞ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à –∞–∫—Ç–∏–≤–Ω–∞. –ß—É–¥–æ–≤–∏–π —á–∞—Å –¥–ª—è —Ä–∏–±–æ–ª–æ–≤–ª—ñ.";
    } else if (currentPressure < nextPressure) {
        pressureAdvice = "–¢–∏—Å–∫ –ø–∞–¥–∞—î: –º–æ–∂–ª–∏–≤—ñ –∑–º—ñ–Ω–∏ —É –ø–æ–≤–µ–¥—ñ–Ω—Ü—ñ —Ä–∏–±–∏. –ë—É–¥—å—Ç–µ —É–≤–∞–∂–Ω—ñ.";
    } else {
        pressureAdvice = "–¢–∏—Å–∫ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π: —Ö–æ—Ä–æ—à—ñ —É–º–æ–≤–∏ –¥–ª—è —Ä–∏–±–æ–ª–æ–≤–ª—ñ.";
    }
    document.getElementById('pressure-advice').innerHTML = `<p><b>–¢–∏—Å–∫:</b> ${currentPressure} hPa. ${pressureAdvice}</p>`;

    const labels = data.list.map(item => {
        const date = new Date(item.dt * 1000);
        return date.toLocaleDateString('uk-UA', { day: 'numeric', month: 'short' });
    });
    
    let temperatures = data.list.map(item => item.main.temp);
    if (!isCelsius) {
        temperatures = temperatures.map(toFahrenheit);
    }
    const pressures = data.list.map(item => item.main.pressure);

    const tempUnit = isCelsius ? '¬∞C' : '¬∞F';

    if (tempChartInstance) {
        tempChartInstance.destroy();
    }
    if (pressureChartInstance) {
        pressureChartInstance.destroy();
    }

    const tempChartCtx = document.getElementById('tempChart').getContext('2d');
    tempChartInstance = new Chart(tempChartCtx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: `–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (${tempUnit})`,
                data: temperatures,
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1,
                tension: 0.4
            }]
        },
        options: {
            scales: { y: { beginAtZero: false } }
        }
    });

    const pressureChartCtx = document.getElementById('pressureChart').getContext('2d');
    pressureChartInstance = new Chart(pressureChartCtx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: '–¢–∏—Å–∫ (hPa)',
                data: pressures,
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: { y: { beginAtZero: false } }
        }
    });
}

function getAstroData(lat, lon) {
    const today = new Date();
    const times = SunCalc.getTimes(today, lat, lon);
    const moonIllumination = SunCalc.getMoonIllumination(today);
    const sunrise = times.sunrise.toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' });
    const sunset = times.sunset.toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' });
    const moonPhase = moonIllumination.phase;
    const moonIlluminationPercent = Math.round(moonPhase * 100);

    let moonAdvice = "";
    if (moonPhase > 0.45 && moonPhase < 0.55) {
        moonAdvice = "–ü–æ–≤–Ω–∏–π –ú—ñ—Å—è—Ü—å. –ê–∫—Ç–∏–≤–Ω–∏–π –∫–ª—å–æ–≤. üåï";
    } else if (moonPhase < 0.05 || moonPhase > 0.95) {
        moonAdvice = "–ù–æ–≤–∏–π –ú—ñ—Å—è—Ü—å. –°–ø—Ä–∏—è—Ç–ª–∏–≤–∏–π —á–∞—Å –¥–ª—è —Ä–∏–±–æ–ª–æ–≤–ª—ñ. üåë";
    } else {
        moonAdvice = "–ó–º—ñ–Ω—é—î—Ç—å—Å—è —Ñ–∞–∑–∞. –ö–ª—å–æ–≤ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à –ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∏–º.";
    }

    document.getElementById('astro-info').innerHTML = `
        <h3>–ê—Å—Ç—Ä–æ–Ω–æ–º—ñ—á–Ω—ñ –¥–∞–Ω—ñ</h3>
        <p>–°—Ö—ñ–¥ —Å–æ–Ω—Ü—è: ${sunrise}</p>
        <p>–ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è: ${sunset}</p>
        <p>–§–∞–∑–∞ –ú—ñ—Å—è—Ü—è: ${moonIlluminationPercent}% –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è. ${moonAdvice}</p>
    `;
}

function calculateSuccessIndex(data) {
    let index = 0;
    const temp = data.main.temp;
    const windSpeed = data.wind.speed;
    const pressure = data.main.pressure;
    const moonPhase = SunCalc.getMoonIllumination(new Date()).phase;

    if (temp >= 10 && temp <= 25) { index += 3; } else if (temp > 5 && temp < 30) { index += 2; }
    if (windSpeed < 5) { index += 3; } else if (windSpeed >= 5 && windSpeed < 10) { index += 2; } else { index += 1; }
    if (pressure > 1013) { index += 2; } else { index += 1; }
    if (moonPhase > 0.45 && moonPhase < 0.55 || moonPhase < 0.05 || moonPhase > 0.95) { index += 2; } else { index += 1; }

    const finalIndex = Math.min(10, Math.max(1, Math.round(index * 1.25)));

    let indexMessage = "";
    if (finalIndex >= 8) { indexMessage = "–î—É–∂–µ –≤–∏—Å–æ–∫–∏–π —à–∞–Ω—Å –Ω–∞ —É—Å–ø—ñ—à–Ω—É —Ä–∏–±–æ–ª–æ–≤–ª—é! üéâ"; } else if (finalIndex >= 5) { indexMessage = "–£–º–æ–≤–∏ —Ö–æ—Ä–æ—à—ñ. –í–∞—Ä—Ç–æ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏! üëç"; } else { indexMessage = "–£–º–æ–≤–∏ –Ω–µ –Ω–∞–π–∫—Ä–∞—â—ñ. –ú–æ–∂–µ –ø–æ—â–∞—Å—Ç–∏—Ç—å. üé£"; }

    document.getElementById('success-index').innerHTML = `
        <h3>–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø—ñ—Ö—É</h3>
        <p><b>–Ü–Ω–¥–µ–∫—Å —Ä–∏–±–æ–ª–æ–≤–ª—ñ:</b> ${finalIndex}/10. ${indexMessage}</p>
    `;
}

// –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –º—ñ—Å—Ç–æ
const savedCity = getSavedCity();
const initialCity = savedCity || 'Kyiv';
cityInput.value = initialCity;

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ
getWeatherData(initialCity);
