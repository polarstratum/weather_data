const API_KEY = '{{secrets.OPENWEATHER_API_KEY}}';
const DEFAULT_CITIES = ['Kyiv', 'Lviv', 'Odesa'];
const columnData = {};

function saveCity(city, columnId) {
    localStorage.setItem(`lastCity_${columnId}`, city);
}

function getSavedCity(columnId) {
    return localStorage.getItem(`lastCity_${columnId}`);
}

function initColumn(columnId, defaultCity) {
    const cityInput = document.getElementById(`cityInput${columnId}`);
    const searchButton = document.getElementById(`searchButton${columnId}`);
    
    let savedCity = getSavedCity(columnId) || defaultCity;
    cityInput.value = savedCity;

    searchButton.addEventListener('click', () => {
        const city = cityInput.value;
        if (city) {
            getWeatherData(city, columnId);
            saveCity(city, columnId);
        }
    });

    cityInput.addEventListener('keypress', (event) => {
        if (event.key === 'Enter') {
            searchButton.click();
        }
    });

    columnData[columnId] = { tempChartInstance: null, pressureChartInstance: null };
    getWeatherData(savedCity, columnId);
}

function getWeatherData(city, columnId) {
    const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric&lang=ua`;
    const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric&lang=ua`;

    fetch(weatherUrl)
        .then(response => response.json())
        .then(data => {
            if (data.cod === 200) {
                displayWeather(data, columnId);
                getAstroData(data.coord.lat, data.coord.lon, columnId);
                calculateSuccessIndex(data, columnId);
            } else {
                document.getElementById(`weather-info-${columnId}`).innerHTML = `<p>–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</p>`;
            }
        })
        .catch(error => console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö:', error));

    fetch(forecastUrl)
        .then(response => response.json())
        .then(data => {
            if (data.cod === "200") {
                const currentPressure = data.list[0].main.pressure;
                const nextPressure = data.list[1].main.pressure;
                let pressureAdvice = "";
                if (currentPressure > nextPressure) {
                    pressureAdvice = "–¢–∏—Å–∫ –∑—Ä–æ—Å—Ç–∞—î: —Ä–∏–±–∞ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à –∞–∫—Ç–∏–≤–Ω–∞. –ß—É–¥–æ–≤–∏–π —á–∞—Å –¥–ª—è —Ä–∏–±–æ–ª–æ–≤–ª—ñ.";
                } else if (currentPressure < nextPressure) {
                    pressureAdvice = "–¢–∏—Å–∫ –ø–∞–¥–∞—î: –º–æ–∂–ª–∏–≤—ñ –∑–º—ñ–Ω–∏ —É –ø–æ–≤–µ–¥—ñ–Ω—Ü—ñ —Ä–∏–±–∏. –ë—É–¥—å—Ç–µ —É–≤–∞–∂–Ω—ñ.";
                } else {
                    pressureAdvice = "–¢–∏—Å–∫ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π: —Ö–æ—Ä–æ—à—ñ —É–º–æ–≤–∏ –¥–ª—è —Ä–∏–±–æ–ª–æ–≤–ª—ñ.";
                }
                document.getElementById(`pressure-advice-${columnId}`).innerHTML = `<p><b>–¢–∏—Å–∫:</b> ${currentPressure} hPa. ${pressureAdvice}</p>`;

                const labels = data.list.map(item => new Date(item.dt * 1000).toLocaleDateString('uk-UA', { day: 'numeric', month: 'short' }));
                const temperatures = data.list.map(item => item.main.temp);
                const pressures = data.list.map(item => item.main.pressure);

                if (columnData[columnId].tempChartInstance) {
                    columnData[columnId].tempChartInstance.destroy();
                }
                if (columnData[columnId].pressureChartInstance) {
                    columnData[columnId].pressureChartInstance.destroy();
                }

                const tempChartCtx = document.getElementById(`tempChart${columnId}`).getContext('2d');
                columnData[columnId].tempChartInstance = new Chart(tempChartCtx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{ label: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)', data: temperatures, backgroundColor: 'rgba(255, 99, 132, 0.2)', borderColor: 'rgba(255, 99, 132, 1)', borderWidth: 1, tension: 0.4 }]
                    }, options: { scales: { y: { beginAtZero: false } } }
                });

                const pressureChartCtx = document.getElementById(`pressureChart${columnId}`).getContext('2d');
                columnData[columnId].pressureChartInstance = new Chart(pressureChartCtx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{ label: '–¢–∏—Å–∫ (hPa)', data: pressures, backgroundColor: 'rgba(54, 162, 235, 0.2)', borderColor: 'rgba(54, 162, 235, 1)', borderWidth: 1 }]
                    }, options: { scales: { y: { beginAtZero: false } } }
                });
            }
        })
        .catch(error => console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑—É:', error));
}

function displayWeather(data, columnId) {
    const temperature = data.main.temp;
    const description = data.weather[0].description;
    const windSpeed = data.wind.speed;
    const windDeg = data.wind.deg;

    document.getElementById(`weather-info-${columnId}`).innerHTML = `
        <h3>–ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –≤ ${data.name}</h3>
        <p>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temperature}¬∞C</p>
        <p>–û–ø–∏—Å: ${description}</p>
    `;

    document.getElementById(`wind-info-${columnId}`).innerHTML = `
        <p>
            –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: ${windSpeed} –º/—Å
            <span style="display: inline-block; transform: rotate(${windDeg}deg);">‚Üë</span>
        </p>
    `;
}

function getAstroData(lat, lon, columnId) {
    const today = new Date();
    const times = SunCalc.getTimes(today, lat, lon);
    const moonIllumination = SunCalc.getMoonIllumination(today);
    const sunrise = times.sunrise.toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' });
    const sunset = times.sunset.toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' });
    const moonPhase = moonIllumination.phase;
    const moonIlluminationPercent = Math.round(moonPhase * 100);

    let moonAdvice = "";
    if (moonPhase > 0.45 && moonPhase < 0.55) {
        moonAdvice = "–ü–æ–≤–Ω–∏–π –ú—ñ—Å—è—Ü—å. –ê–∫—Ç–∏–≤–Ω–∏–π –∫–ª—å–æ–≤. üåï";
    } else if (moonPhase < 0.05 || moonPhase > 0.95) {
        moonAdvice = "–ù–æ–≤–∏–π –ú—ñ—Å—è—Ü—å. –°–ø—Ä–∏—è—Ç–ª–∏–≤–∏–π —á–∞—Å –¥–ª—è —Ä–∏–±–æ–ª–æ–≤–ª—ñ. üåë";
    } else {
        moonAdvice = "–ó–º—ñ–Ω—é—î—Ç—å—Å—è —Ñ–∞–∑–∞. –ö–ª—å–æ–≤ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à –ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∏–º.";
    }

    document.getElementById(`astro-info-${columnId}`).innerHTML = `
        <h3>–ê—Å—Ç—Ä–æ–Ω–æ–º—ñ—á–Ω—ñ –¥–∞–Ω—ñ</h3>
        <p>–°—Ö—ñ–¥ —Å–æ–Ω—Ü—è: ${sunrise}</p>
        <p>–ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è: ${sunset}</p>
        <p>–§–∞–∑–∞ –ú—ñ—Å—è—Ü—è: ${moonIlluminationPercent}% –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è. ${moonAdvice}</p>
    `;
}

function calculateSuccessIndex(data, columnId) {
    let index = 0;
    const temp = data.main.temp;
    const windSpeed = data.wind.speed;
    const pressure = data.main.pressure;
    const moonPhase = SunCalc.getMoonIllumination(new Date()).phase;

    if (temp >= 10 && temp <= 25) { index += 3; } else if (temp > 5 && temp < 30) { index += 2; }
    if (windSpeed < 5) { index += 3; } else if (windSpeed >= 5 && windSpeed < 10) { index += 2; } else { index += 1; }
    if (pressure > 1013) { index += 2; } else { index += 1; }
    if (moonPhase > 0.45 && moonPhase < 0.55 || moonPhase < 0.05 || moonPhase > 0.95) { index += 2; } else { index += 1; }

    const finalIndex = Math.min(10, Math.max(1, Math.round(index * 1.25)));

    let indexMessage = "";
    if (finalIndex >= 8) { indexMessage = "–î—É–∂–µ –≤–∏—Å–æ–∫–∏–π —à–∞–Ω—Å –Ω–∞ —É—Å–ø—ñ—à–Ω—É —Ä–∏–±–æ–ª–æ–≤–ª—é! üéâ"; } else if (finalIndex >= 5) { indexMessage = "–£–º–æ–≤–∏ —Ö–æ—Ä–æ—à—ñ. –í–∞—Ä—Ç–æ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏! üëç"; } else { indexMessage = "–£–º–æ–≤–∏ –Ω–µ –Ω–∞–π–∫—Ä–∞—â—ñ. –ú–æ–∂–µ –ø–æ—â–∞—Å—Ç–∏—Ç—å. üé£"; }

    document.getElementById(`success-index-${columnId}`).innerHTML = `
        <h3>–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø—ñ—Ö—É</h3>
        <p><b>–Ü–Ω–¥–µ–∫—Å —Ä–∏–±–æ–ª–æ–≤–ª—ñ:</b> ${finalIndex}/10. ${indexMessage}</p>
    `;
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤—Å—ñ —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏
initColumn(1, DEFAULT_CITIES[0]);
initColumn(2, DEFAULT_CITIES[1]);
initColumn(3, DEFAULT_CITIES[2]);
